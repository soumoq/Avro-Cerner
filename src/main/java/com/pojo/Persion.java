/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pojo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Persion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2438846862348621753L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Persion\",\"namespace\":\"com.pojo\",\"fields\":[{\"name\":\"persionId\",\"type\":\"int\"},{\"name\":\"gender\",\"type\":[\"string\",\"null\"]},{\"name\":\"name\",\"type\":[{\"type\":\"record\",\"name\":\"Name\",\"fields\":[{\"name\":\"fullName\",\"type\":[\"string\",\"null\"]},{\"name\":\"firstName\",\"type\":[\"string\",\"null\"]},{\"name\":\"lastName\",\"type\":[\"string\",\"null\"]}]},\"null\"]},{\"name\":\"addresses\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"]},{\"name\":\"phones\",\"type\":[{\"type\":\"array\",\"items\":\"long\"},\"null\"],\"default\":[]},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"purchases\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phrchases\",\"fields\":[{\"name\":\"storeId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"generic\",\"type\":\"string\"},{\"name\":\"purchaseBy\",\"type\":[\"string\",\"null\"]},{\"name\":\"purchaseData\",\"type\":\"string\"}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int persionId;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public com.pojo.Name name;
  @Deprecated public java.util.List<java.lang.CharSequence> addresses;
  @Deprecated public java.util.List<java.lang.Long> phones;
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.util.List<com.pojo.Phrchases> purchases;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Persion() {}

  /**
   * All-args constructor.
   */
  public Persion(java.lang.Integer persionId, java.lang.CharSequence gender, com.pojo.Name name, java.util.List<java.lang.CharSequence> addresses, java.util.List<java.lang.Long> phones, java.lang.CharSequence email, java.util.List<com.pojo.Phrchases> purchases) {
    this.persionId = persionId;
    this.gender = gender;
    this.name = name;
    this.addresses = addresses;
    this.phones = phones;
    this.email = email;
    this.purchases = purchases;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return persionId;
    case 1: return gender;
    case 2: return name;
    case 3: return addresses;
    case 4: return phones;
    case 5: return email;
    case 6: return purchases;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: persionId = (java.lang.Integer)value$; break;
    case 1: gender = (java.lang.CharSequence)value$; break;
    case 2: name = (com.pojo.Name)value$; break;
    case 3: addresses = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: phones = (java.util.List<java.lang.Long>)value$; break;
    case 5: email = (java.lang.CharSequence)value$; break;
    case 6: purchases = (java.util.List<com.pojo.Phrchases>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'persionId' field.
   */
  public java.lang.Integer getPersionId() {
    return persionId;
  }

  /**
   * Sets the value of the 'persionId' field.
   * @param value the value to set.
   */
  public void setPersionId(java.lang.Integer value) {
    this.persionId = value;
  }

  /**
   * Gets the value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public com.pojo.Name getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(com.pojo.Name value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'addresses' field.
   */
  public java.util.List<java.lang.CharSequence> getAddresses() {
    return addresses;
  }

  /**
   * Sets the value of the 'addresses' field.
   * @param value the value to set.
   */
  public void setAddresses(java.util.List<java.lang.CharSequence> value) {
    this.addresses = value;
  }

  /**
   * Gets the value of the 'phones' field.
   */
  public java.util.List<java.lang.Long> getPhones() {
    return phones;
  }

  /**
   * Sets the value of the 'phones' field.
   * @param value the value to set.
   */
  public void setPhones(java.util.List<java.lang.Long> value) {
    this.phones = value;
  }

  /**
   * Gets the value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'purchases' field.
   */
  public java.util.List<com.pojo.Phrchases> getPurchases() {
    return purchases;
  }

  /**
   * Sets the value of the 'purchases' field.
   * @param value the value to set.
   */
  public void setPurchases(java.util.List<com.pojo.Phrchases> value) {
    this.purchases = value;
  }

  /**
   * Creates a new Persion RecordBuilder.
   * @return A new Persion RecordBuilder
   */
  public static com.pojo.Persion.Builder newBuilder() {
    return new com.pojo.Persion.Builder();
  }
  
  /**
   * Creates a new Persion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Persion RecordBuilder
   */
  public static com.pojo.Persion.Builder newBuilder(com.pojo.Persion.Builder other) {
    return new com.pojo.Persion.Builder(other);
  }
  
  /**
   * Creates a new Persion RecordBuilder by copying an existing Persion instance.
   * @param other The existing instance to copy.
   * @return A new Persion RecordBuilder
   */
  public static com.pojo.Persion.Builder newBuilder(com.pojo.Persion other) {
    return new com.pojo.Persion.Builder(other);
  }
  
  /**
   * RecordBuilder for Persion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Persion>
    implements org.apache.avro.data.RecordBuilder<Persion> {

    private int persionId;
    private java.lang.CharSequence gender;
    private com.pojo.Name name;
    private com.pojo.Name.Builder nameBuilder;
    private java.util.List<java.lang.CharSequence> addresses;
    private java.util.List<java.lang.Long> phones;
    private java.lang.CharSequence email;
    private java.util.List<com.pojo.Phrchases> purchases;

    /** Creates a new Builder */
    private Builder() {
      super(com.pojo.Persion.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pojo.Persion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.persionId)) {
        this.persionId = data().deepCopy(fields()[0].schema(), other.persionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gender)) {
        this.gender = data().deepCopy(fields()[1].schema(), other.gender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (other.hasNameBuilder()) {
        this.nameBuilder = com.pojo.Name.newBuilder(other.getNameBuilder());
      }
      if (isValidValue(fields()[3], other.addresses)) {
        this.addresses = data().deepCopy(fields()[3].schema(), other.addresses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phones)) {
        this.phones = data().deepCopy(fields()[4].schema(), other.phones);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.email)) {
        this.email = data().deepCopy(fields()[5].schema(), other.email);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.purchases)) {
        this.purchases = data().deepCopy(fields()[6].schema(), other.purchases);
        fieldSetFlags()[6] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Persion instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pojo.Persion other) {
            super(com.pojo.Persion.SCHEMA$);
      if (isValidValue(fields()[0], other.persionId)) {
        this.persionId = data().deepCopy(fields()[0].schema(), other.persionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gender)) {
        this.gender = data().deepCopy(fields()[1].schema(), other.gender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      this.nameBuilder = null;
      if (isValidValue(fields()[3], other.addresses)) {
        this.addresses = data().deepCopy(fields()[3].schema(), other.addresses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phones)) {
        this.phones = data().deepCopy(fields()[4].schema(), other.phones);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.email)) {
        this.email = data().deepCopy(fields()[5].schema(), other.email);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.purchases)) {
        this.purchases = data().deepCopy(fields()[6].schema(), other.purchases);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'persionId' field.
      * @return The value.
      */
    public java.lang.Integer getPersionId() {
      return persionId;
    }

    /**
      * Sets the value of the 'persionId' field.
      * @param value The value of 'persionId'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setPersionId(int value) {
      validate(fields()[0], value);
      this.persionId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'persionId' field has been set.
      * @return True if the 'persionId' field has been set, false otherwise.
      */
    public boolean hasPersionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'persionId' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearPersionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.gender = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearGender() {
      gender = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public com.pojo.Name getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setName(com.pojo.Name value) {
      validate(fields()[2], value);
      this.nameBuilder = null;
      this.name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'name' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pojo.Name.Builder getNameBuilder() {
      if (nameBuilder == null) {
        if (hasName()) {
          setNameBuilder(com.pojo.Name.newBuilder(name));
        } else {
          setNameBuilder(com.pojo.Name.newBuilder());
        }
      }
      return nameBuilder;
    }

    /**
     * Sets the Builder instance for the 'name' field
     * @return This builder.
     */
    public com.pojo.Persion.Builder setNameBuilder(com.pojo.Name.Builder value) {
      clearName();
      nameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'name' field has an active Builder instance
     * @return True if the 'name' field has an active Builder instance
     */
    public boolean hasNameBuilder() {
      return nameBuilder != null;
    }

    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearName() {
      name = null;
      nameBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addresses' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAddresses() {
      return addresses;
    }

    /**
      * Sets the value of the 'addresses' field.
      * @param value The value of 'addresses'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setAddresses(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.addresses = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'addresses' field has been set.
      * @return True if the 'addresses' field has been set, false otherwise.
      */
    public boolean hasAddresses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addresses' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearAddresses() {
      addresses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'phones' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getPhones() {
      return phones;
    }

    /**
      * Sets the value of the 'phones' field.
      * @param value The value of 'phones'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setPhones(java.util.List<java.lang.Long> value) {
      validate(fields()[4], value);
      this.phones = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'phones' field has been set.
      * @return True if the 'phones' field has been set, false otherwise.
      */
    public boolean hasPhones() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'phones' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearPhones() {
      phones = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.email = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearEmail() {
      email = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchases' field.
      * @return The value.
      */
    public java.util.List<com.pojo.Phrchases> getPurchases() {
      return purchases;
    }

    /**
      * Sets the value of the 'purchases' field.
      * @param value The value of 'purchases'.
      * @return This builder.
      */
    public com.pojo.Persion.Builder setPurchases(java.util.List<com.pojo.Phrchases> value) {
      validate(fields()[6], value);
      this.purchases = value;
      fieldSetFlags()[6] = true;
      return this; 
    }

    /**
      * Checks whether the 'purchases' field has been set.
      * @return True if the 'purchases' field has been set, false otherwise.
      */
    public boolean hasPurchases() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'purchases' field.
      * @return This builder.
      */
    public com.pojo.Persion.Builder clearPurchases() {
      purchases = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Persion build() {
      try {
        Persion record = new Persion();
        record.persionId = fieldSetFlags()[0] ? this.persionId : (java.lang.Integer) defaultValue(fields()[0]);
        record.gender = fieldSetFlags()[1] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (nameBuilder != null) {
          record.name = this.nameBuilder.build();
        } else {
          record.name = fieldSetFlags()[2] ? this.name : (com.pojo.Name) defaultValue(fields()[2]);
        }
        record.addresses = fieldSetFlags()[3] ? this.addresses : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.phones = fieldSetFlags()[4] ? this.phones : (java.util.List<java.lang.Long>) defaultValue(fields()[4]);
        record.email = fieldSetFlags()[5] ? this.email : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.purchases = fieldSetFlags()[6] ? this.purchases : (java.util.List<com.pojo.Phrchases>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
