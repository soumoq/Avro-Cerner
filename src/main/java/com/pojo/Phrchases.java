/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pojo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Phrchases extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5439764625812009374L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Phrchases\",\"namespace\":\"com.pojo\",\"fields\":[{\"name\":\"storeId\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"generic\",\"type\":\"string\"},{\"name\":\"purchaseBy\",\"type\":[\"string\",\"null\"]},{\"name\":\"purchaseData\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int storeId;
  @Deprecated public double amount;
  @Deprecated public java.lang.CharSequence generic;
  @Deprecated public java.lang.CharSequence purchaseBy;
  @Deprecated public java.lang.CharSequence purchaseData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Phrchases() {}

  /**
   * All-args constructor.
   */
  public Phrchases(java.lang.Integer storeId, java.lang.Double amount, java.lang.CharSequence generic, java.lang.CharSequence purchaseBy, java.lang.CharSequence purchaseData) {
    this.storeId = storeId;
    this.amount = amount;
    this.generic = generic;
    this.purchaseBy = purchaseBy;
    this.purchaseData = purchaseData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return storeId;
    case 1: return amount;
    case 2: return generic;
    case 3: return purchaseBy;
    case 4: return purchaseData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: storeId = (java.lang.Integer)value$; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: generic = (java.lang.CharSequence)value$; break;
    case 3: purchaseBy = (java.lang.CharSequence)value$; break;
    case 4: purchaseData = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'storeId' field.
   */
  public java.lang.Integer getStoreId() {
    return storeId;
  }

  /**
   * Sets the value of the 'storeId' field.
   * @param value the value to set.
   */
  public void setStoreId(java.lang.Integer value) {
    this.storeId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'generic' field.
   */
  public java.lang.CharSequence getGeneric() {
    return generic;
  }

  /**
   * Sets the value of the 'generic' field.
   * @param value the value to set.
   */
  public void setGeneric(java.lang.CharSequence value) {
    this.generic = value;
  }

  /**
   * Gets the value of the 'purchaseBy' field.
   */
  public java.lang.CharSequence getPurchaseBy() {
    return purchaseBy;
  }

  /**
   * Sets the value of the 'purchaseBy' field.
   * @param value the value to set.
   */
  public void setPurchaseBy(java.lang.CharSequence value) {
    this.purchaseBy = value;
  }

  /**
   * Gets the value of the 'purchaseData' field.
   */
  public java.lang.CharSequence getPurchaseData() {
    return purchaseData;
  }

  /**
   * Sets the value of the 'purchaseData' field.
   * @param value the value to set.
   */
  public void setPurchaseData(java.lang.CharSequence value) {
    this.purchaseData = value;
  }

  /**
   * Creates a new Phrchases RecordBuilder.
   * @return A new Phrchases RecordBuilder
   */
  public static com.pojo.Phrchases.Builder newBuilder() {
    return new com.pojo.Phrchases.Builder();
  }
  
  /**
   * Creates a new Phrchases RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Phrchases RecordBuilder
   */
  public static com.pojo.Phrchases.Builder newBuilder(com.pojo.Phrchases.Builder other) {
    return new com.pojo.Phrchases.Builder(other);
  }
  
  /**
   * Creates a new Phrchases RecordBuilder by copying an existing Phrchases instance.
   * @param other The existing instance to copy.
   * @return A new Phrchases RecordBuilder
   */
  public static com.pojo.Phrchases.Builder newBuilder(com.pojo.Phrchases other) {
    return new com.pojo.Phrchases.Builder(other);
  }
  
  /**
   * RecordBuilder for Phrchases instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Phrchases>
    implements org.apache.avro.data.RecordBuilder<Phrchases> {

    private int storeId;
    private double amount;
    private java.lang.CharSequence generic;
    private java.lang.CharSequence purchaseBy;
    private java.lang.CharSequence purchaseData;

    /** Creates a new Builder */
    private Builder() {
      super(com.pojo.Phrchases.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pojo.Phrchases.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.storeId)) {
        this.storeId = data().deepCopy(fields()[0].schema(), other.storeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.generic)) {
        this.generic = data().deepCopy(fields()[2].schema(), other.generic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.purchaseBy)) {
        this.purchaseBy = data().deepCopy(fields()[3].schema(), other.purchaseBy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.purchaseData)) {
        this.purchaseData = data().deepCopy(fields()[4].schema(), other.purchaseData);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Phrchases instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pojo.Phrchases other) {
            super(com.pojo.Phrchases.SCHEMA$);
      if (isValidValue(fields()[0], other.storeId)) {
        this.storeId = data().deepCopy(fields()[0].schema(), other.storeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.generic)) {
        this.generic = data().deepCopy(fields()[2].schema(), other.generic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.purchaseBy)) {
        this.purchaseBy = data().deepCopy(fields()[3].schema(), other.purchaseBy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.purchaseData)) {
        this.purchaseData = data().deepCopy(fields()[4].schema(), other.purchaseData);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'storeId' field.
      * @return The value.
      */
    public java.lang.Integer getStoreId() {
      return storeId;
    }

    /**
      * Sets the value of the 'storeId' field.
      * @param value The value of 'storeId'.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder setStoreId(int value) {
      validate(fields()[0], value);
      this.storeId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'storeId' field has been set.
      * @return True if the 'storeId' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'storeId' field.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder clearStoreId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'generic' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeneric() {
      return generic;
    }

    /**
      * Sets the value of the 'generic' field.
      * @param value The value of 'generic'.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder setGeneric(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.generic = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'generic' field has been set.
      * @return True if the 'generic' field has been set, false otherwise.
      */
    public boolean hasGeneric() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'generic' field.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder clearGeneric() {
      generic = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchaseBy' field.
      * @return The value.
      */
    public java.lang.CharSequence getPurchaseBy() {
      return purchaseBy;
    }

    /**
      * Sets the value of the 'purchaseBy' field.
      * @param value The value of 'purchaseBy'.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder setPurchaseBy(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.purchaseBy = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'purchaseBy' field has been set.
      * @return True if the 'purchaseBy' field has been set, false otherwise.
      */
    public boolean hasPurchaseBy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'purchaseBy' field.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder clearPurchaseBy() {
      purchaseBy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchaseData' field.
      * @return The value.
      */
    public java.lang.CharSequence getPurchaseData() {
      return purchaseData;
    }

    /**
      * Sets the value of the 'purchaseData' field.
      * @param value The value of 'purchaseData'.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder setPurchaseData(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.purchaseData = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'purchaseData' field has been set.
      * @return True if the 'purchaseData' field has been set, false otherwise.
      */
    public boolean hasPurchaseData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'purchaseData' field.
      * @return This builder.
      */
    public com.pojo.Phrchases.Builder clearPurchaseData() {
      purchaseData = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Phrchases build() {
      try {
        Phrchases record = new Phrchases();
        record.storeId = fieldSetFlags()[0] ? this.storeId : (java.lang.Integer) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.generic = fieldSetFlags()[2] ? this.generic : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.purchaseBy = fieldSetFlags()[3] ? this.purchaseBy : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.purchaseData = fieldSetFlags()[4] ? this.purchaseData : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
